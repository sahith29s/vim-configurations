{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "javascript,typescript",
		"prefix": "cl",
		"body": [
			"console.log($1);",
		],
		"description": "Log output to console"
	},

	"function snippet": {
		"scope": "javascript,typescript",
		"prefix": "f",
		"body": [
			"const $1 = async () =>{",
			"};"
		],
		"description": "function snippet"
	},
	"get": {
		"scope": "javascript,typescript",
		"prefix": "ge",
		"body": [
		"app.get(\"/$1\", async (req , res) => { ",
		"});"
		],
		"description": "app.get "
	},
	"map": {
		"scope": "javascript,typescript ",
		"prefix": "ma",
		"body": [
			"$1.map((item , index ,arrary) => {  ",
			"});"
		],
		"description": "app.get "
	},
	"require": {
		"scope": "javascript,typescript ",
		"prefix": "re",
		"body": [
		"const $1 = require(\"$1\");"
		],
		"description": "app.get "
	},
	"express": {
		"scope": "javascript,typescript ",
		"prefix": "ex",
		"body": [
			"const express = require(\"express\");",
			"port = process.env.PORT || 3000;",
			"const app = express();\n  \n",
			"app.get(\"/\", (req, res)=>{",
			"\tres.send(\"Hi\");",
			"});\n\n",
			"app.listen(port, ()=>{",
			"console.log(`app running on port ${port}`)",
			"})"
		],
		"description": "app.get "
	},

	"try and catch": {
		"scope": "javascript,typescript ",
		"prefix": "tr",
		"body": [
			
		],

		"description": "app.get "
	},





}